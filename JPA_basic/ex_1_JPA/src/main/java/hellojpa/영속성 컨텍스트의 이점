



EntityManager em = emf.createEntityManager(); //EntityManager생성하면 persistenceContext라는 영속성 컨텍스트 공간이 생성됨(눈에 안보임)

영속성 컨텍스트(엔티티를 영구저장하는환경)의 이점 (데이터 저장, 찾은 상태)
1. 엔티티조회, 1차캐시
     - em.persist(member); 했을 때 db저장 전 1차 캐시에 저장됨 (@id는 "내가 셋팅한 id값" 값은 member자체)
      엔티티 조회시 jpa는 db보다 먼저 1차 캐시를 뒤져서 찾아봄 ㅋㅋ?
      1차 캐시에는 없고 db에 있는 값을 조회할 경우에는 1차캐시 조회(없음)->db조회->1차 캐시에 저장->반환
      같은 값을 두번조회할 때 한번은 db에서 꺼내고 한번은 그전에 올려놓았던 persistenceContext에서 가져오기 때문에 쿼리는 한번만 발생한다.

2. 영속 엔티티의 동일성 보장
    - 마치 자바컬렉션에서 객체 생성후 ==비교시 같은 주소값을 같아서 true가 되는 것처럼 persistenceContext 안의 엔티티의 동일성을 보장한다.
     (1차 캐시가 있기 때문에 가능->같은 트랜젝션안에서 가능)

3. 엔티티 등록시 트랜잭션을 지원하는 쓰기 지연?
     em.persist(member); 했을 시 SQL을 DB에 보내지 않는다-> jap가 db에는 보내지 않고 '쓰기지연 SQL'에 삽입 쿼리를 생성만 함
     transaction.commit시 한꺼번에 보냄
     때문에 버퍼링(모았다가 보냄)이라는 기능을 사용 할 수 있당

4. 엔티티 수정(변경감지 기능)
    데이터 수정시 member.setName("변경할 값"); 으로 바로 수정가능(셋팅만 된것이 아니라 바로 수정됨)
     em.persist(member); 해서 다시 저장하지 않아도 됨
     Member member = em.find(Member.class, 150L); //찾고
                 member.setName("바꾸기"); //바꾸기

    + 플러시 기능
    영속성 컨텍스트의 쿼리들을 DB에 날려주는 기능 (트랜젝션 커밋시 플러시 발생)
    - 변경감지, 수정된 엔티티 '쓰기지연 SQL저장소' 에 등록, 쿼리를 데이터 베이스에 전송
    -영속성 컨텍스트를 비우지 않음

    쓰는방법
    -트랜잭션 커밋(수동), em.flush 직접호출(자동), JPQL 쿼리실행(자동)


5. 엔티티 삭제
    Member member = em.find(Member.class, 150L); //찾고
    em.remove(member); //삭제
